/* tslint:disable */
/* eslint-disable */
/**
 * KapitelShelf.Api, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * The Author DTO.
 * @export
 * @interface AuthorDTO
 */
export interface AuthorDTO {
    /**
     * Gets or sets the author id.
     * @type {string}
     * @memberof AuthorDTO
     */
    'id'?: string;
    /**
     * Gets or sets or set the first name.
     * @type {string}
     * @memberof AuthorDTO
     */
    'firstName'?: string | null;
    /**
     * Gets or sets the last name.
     * @type {string}
     * @memberof AuthorDTO
     */
    'lastName'?: string | null;
}
/**
 * The book dto.
 * @export
 * @interface BookDTO
 */
export interface BookDTO {
    /**
     * Gets or sets the book id.
     * @type {string}
     * @memberof BookDTO
     */
    'id'?: string;
    /**
     * Gets or sets the title.
     * @type {string}
     * @memberof BookDTO
     */
    'title'?: string | null;
    /**
     * Gets or sets the description.
     * @type {string}
     * @memberof BookDTO
     */
    'description'?: string | null;
    /**
     * Gets or sets the release date.
     * @type {string}
     * @memberof BookDTO
     */
    'releaseDate'?: string | null;
    /**
     * Gets or sets the page number.
     * @type {number}
     * @memberof BookDTO
     */
    'pageNumber'?: number | null;
    /**
     * 
     * @type {SeriesDTO}
     * @memberof BookDTO
     */
    'series'?: SeriesDTO;
    /**
     * Gets or sets the series number.
     * @type {number}
     * @memberof BookDTO
     */
    'seriesNumber'?: number;
    /**
     * 
     * @type {AuthorDTO}
     * @memberof BookDTO
     */
    'author'?: AuthorDTO;
    /**
     * Gets or sets the categories.
     * @type {Array<CategoryDTO>}
     * @memberof BookDTO
     */
    'categories'?: Array<CategoryDTO> | null;
    /**
     * Gets or sets the tags.
     * @type {Array<TagDTO>}
     * @memberof BookDTO
     */
    'tags'?: Array<TagDTO> | null;
    /**
     * 
     * @type {FileInfoDTO}
     * @memberof BookDTO
     */
    'cover'?: FileInfoDTO;
    /**
     * 
     * @type {LocationDTO}
     * @memberof BookDTO
     */
    'location'?: LocationDTO;
}
/**
 * The paginated result.
 * @export
 * @interface BookDTOPagedResult
 */
export interface BookDTOPagedResult {
    /**
     * Gets or sets the items.
     * @type {Array<BookDTO>}
     * @memberof BookDTOPagedResult
     */
    'items'?: Array<BookDTO> | null;
    /**
     * Gets or sets the total number of items.
     * @type {number}
     * @memberof BookDTOPagedResult
     */
    'totalCount'?: number;
}
/**
 * The category dto.
 * @export
 * @interface CategoryDTO
 */
export interface CategoryDTO {
    /**
     * Gets or sets the category id.
     * @type {string}
     * @memberof CategoryDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CategoryDTO
     */
    'name'?: string | null;
}
/**
 * The create dto for a author.
 * @export
 * @interface CreateAuthorDTO
 */
export interface CreateAuthorDTO {
    /**
     * Gets or sets or set the first name.
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'firstName'?: string | null;
    /**
     * Gets or sets the last name.
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'lastName'?: string | null;
}
/**
 * The create dto for a book.
 * @export
 * @interface CreateBookDTO
 */
export interface CreateBookDTO {
    /**
     * Gets or sets the title.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'title'?: string | null;
    /**
     * Gets or sets the description.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'description'?: string | null;
    /**
     * Gets or sets the release date.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'releaseDate'?: string | null;
    /**
     * Gets or sets the page number.
     * @type {number}
     * @memberof CreateBookDTO
     */
    'pageNumber'?: number | null;
    /**
     * 
     * @type {CreateSeriesDTO}
     * @memberof CreateBookDTO
     */
    'series'?: CreateSeriesDTO;
    /**
     * Gets or sets the series number.
     * @type {number}
     * @memberof CreateBookDTO
     */
    'seriesNumber'?: number | null;
    /**
     * 
     * @type {CreateAuthorDTO}
     * @memberof CreateBookDTO
     */
    'author'?: CreateAuthorDTO;
    /**
     * Gets or sets the categories.
     * @type {Array<CreateCategoryDTO>}
     * @memberof CreateBookDTO
     */
    'categories'?: Array<CreateCategoryDTO> | null;
    /**
     * Gets or sets the tags.
     * @type {Array<CreateTagDTO>}
     * @memberof CreateBookDTO
     */
    'tags'?: Array<CreateTagDTO> | null;
    /**
     * 
     * @type {CreateLocationDTO}
     * @memberof CreateBookDTO
     */
    'location'?: CreateLocationDTO;
}
/**
 * The create dto for a category.
 * @export
 * @interface CreateCategoryDTO
 */
export interface CreateCategoryDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateCategoryDTO
     */
    'name'?: string | null;
}
/**
 * The create model for a location.
 * @export
 * @interface CreateLocationDTO
 */
export interface CreateLocationDTO {
    /**
     * 
     * @type {LocationTypeDTO}
     * @memberof CreateLocationDTO
     */
    'type'?: LocationTypeDTO;
    /**
     * Gets or sets the url.
     * @type {string}
     * @memberof CreateLocationDTO
     */
    'url'?: string | null;
}


/**
 * The create dto for a series.
 * @export
 * @interface CreateSeriesDTO
 */
export interface CreateSeriesDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateSeriesDTO
     */
    'name'?: string | null;
}
/**
 * The create dto for a tag.
 * @export
 * @interface CreateTagDTO
 */
export interface CreateTagDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateTagDTO
     */
    'name'?: string | null;
}
/**
 * Gets or sets the fileinfo dto.
 * @export
 * @interface FileInfoDTO
 */
export interface FileInfoDTO {
    /**
     * Gets or sets the fileinfo id.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'id'?: string;
    /**
     * Gets or sets the file path.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'filePath'?: string | null;
    /**
     * Gets or sets the file size in bytes.
     * @type {number}
     * @memberof FileInfoDTO
     */
    'fileSizeBytes'?: number;
    /**
     * Gets or sets the mimetype.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'mimeType'?: string | null;
    /**
     * Gets or sets the sha256 checksum.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'sha256'?: string | null;
    /**
     * Gets the filename.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'fileName'?: string | null;
}
/**
 * The location dto.
 * @export
 * @interface LocationDTO
 */
export interface LocationDTO {
    /**
     * Gets or sets the locaiton id.
     * @type {string}
     * @memberof LocationDTO
     */
    'id'?: string;
    /**
     * 
     * @type {LocationTypeDTO}
     * @memberof LocationDTO
     */
    'type'?: LocationTypeDTO;
    /**
     * Gets or sets the url.
     * @type {string}
     * @memberof LocationDTO
     */
    'url'?: string | null;
    /**
     * 
     * @type {FileInfoDTO}
     * @memberof LocationDTO
     */
    'fileInfo'?: FileInfoDTO;
}


/**
 * The location type enum.
 * @export
 * @enum {number}
 */

export const LocationTypeDTO = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type LocationTypeDTO = typeof LocationTypeDTO[keyof typeof LocationTypeDTO];


/**
 * The series dto.
 * @export
 * @interface SeriesDTO
 */
export interface SeriesDTO {
    /**
     * Gets or sets the series id.
     * @type {string}
     * @memberof SeriesDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof SeriesDTO
     */
    'name'?: string | null;
    /**
     * Gets or sets the creation time.
     * @type {string}
     * @memberof SeriesDTO
     */
    'createdAt'?: string;
    /**
     * Gets or sets the update time.
     * @type {string}
     * @memberof SeriesDTO
     */
    'updatedAt'?: string;
    /**
     * Gets or sets the total number of books.
     * @type {number}
     * @memberof SeriesDTO
     */
    'totalBooks'?: number;
}
/**
 * The series dto.
 * @export
 * @interface SeriesSummaryDTO
 */
export interface SeriesSummaryDTO {
    /**
     * Gets or sets the series id.
     * @type {string}
     * @memberof SeriesSummaryDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof SeriesSummaryDTO
     */
    'name'?: string | null;
    /**
     * Gets or sets the creation time.
     * @type {string}
     * @memberof SeriesSummaryDTO
     */
    'createdAt'?: string;
    /**
     * Gets or sets the update time.
     * @type {string}
     * @memberof SeriesSummaryDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {BookDTO}
     * @memberof SeriesSummaryDTO
     */
    'lastVolume'?: BookDTO;
}
/**
 * The paginated result.
 * @export
 * @interface SeriesSummaryDTOPagedResult
 */
export interface SeriesSummaryDTOPagedResult {
    /**
     * Gets or sets the items.
     * @type {Array<SeriesSummaryDTO>}
     * @memberof SeriesSummaryDTOPagedResult
     */
    'items'?: Array<SeriesSummaryDTO> | null;
    /**
     * Gets or sets the total number of items.
     * @type {number}
     * @memberof SeriesSummaryDTOPagedResult
     */
    'totalCount'?: number;
}
/**
 * The tag dto.
 * @export
 * @interface TagDTO
 */
export interface TagDTO {
    /**
     * Gets or sets the tag id.
     * @type {string}
     * @memberof TagDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof TagDTO
     */
    'name'?: string | null;
}

/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverGet: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdCoverGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/cover`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverPost: async (bookId: string, coverFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdCoverPost', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/cover`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (coverFile !== undefined) { 
                localVarFormParams.append('coverFile', coverFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdDelete: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdDelete', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFileGet: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdFileGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/file`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFilePost: async (bookId: string, bookFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdFilePost', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/file`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (bookFile !== undefined) { 
                localVarFormParams.append('bookFile', bookFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdGet: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportPost: async (bookFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (bookFile !== undefined) { 
                localVarFormParams.append('bookFile', bookFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost: async (createBookDTO?: CreateBookDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdCoverGet(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdCoverGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdCoverPost(bookId, coverFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdCoverPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdDelete(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdFileGet(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdFilePost(bookId, bookFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdGet(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdGet(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksImportPost(bookFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksImportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(createBookDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdCoverGet(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdCoverPost(bookId, coverFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdDelete(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdFileGet(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdFilePost(bookId, bookFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdGet(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.booksBookIdGet(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.booksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.booksImportPost(bookFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.booksPost(createBookDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary Get the cover for a book.
     * @param {string} bookId The id of the book to get the cover for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdCoverGet(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add the cover for a book.
     * @param {string} bookId The id of the book to get.
     * @param {File} [coverFile] The cover image file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdCoverPost(bookId, coverFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a book.
     * @param {string} bookId The id of the book to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdDelete(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the file for a book.
     * @param {string} bookId The id of the book to get the file for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdFileGet(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add the file for a book.
     * @param {string} bookId The id of the book to get.
     * @param {File} [bookFile] The book file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdFilePost(bookId, bookFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get book by the id.
     * @param {string} bookId The id of the book to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdGet(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdGet(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all books.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksGet(options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import a new book.
     * @param {File} [bookFile] Thebook file to import.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksImportPost(bookFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new book.
     * @param {CreateBookDTO} [createBookDTO] The create book dto.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksPost(createBookDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DemoDataApi - axios parameter creator
 * @export
 */
export const DemoDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and inserts demodata into the database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demodataGeneratePut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/demodata/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DemoDataApi - functional programming interface
 * @export
 */
export const DemoDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DemoDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates and inserts demodata into the database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async demodataGeneratePut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.demodataGeneratePut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DemoDataApi.demodataGeneratePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DemoDataApi - factory interface
 * @export
 */
export const DemoDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DemoDataApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates and inserts demodata into the database.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        demodataGeneratePut(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.demodataGeneratePut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DemoDataApi - object-oriented interface
 * @export
 * @class DemoDataApi
 * @extends {BaseAPI}
 */
export class DemoDataApi extends BaseAPI {
    /**
     * 
     * @summary Generates and inserts demodata into the database.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DemoDataApi
     */
    public demodataGeneratePut(options?: RawAxiosRequestConfig) {
        return DemoDataApiFp(this.configuration).demodataGeneratePut(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeriesApi - axios parameter creator
 * @export
 */
export const SeriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdBooksGet: async (seriesId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdBooksGet', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}/books`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdDelete: async (seriesId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdDelete', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdGet: async (seriesId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdGet', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all series summaries.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSummaryGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/series/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeriesApi - functional programming interface
 * @export
 */
export const SeriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdBooksGet(seriesId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdBooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdDelete(seriesId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeriesDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdGet(seriesId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all series summaries.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSummaryGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeriesSummaryDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSummaryGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSummaryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeriesApi - factory interface
 * @export
 */
export const SeriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.seriesSeriesIdBooksGet(seriesId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.seriesSeriesIdDelete(seriesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig): AxiosPromise<SeriesDTO> {
            return localVarFp.seriesSeriesIdGet(seriesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all series summaries.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSummaryGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SeriesSummaryDTOPagedResult> {
            return localVarFp.seriesSummaryGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeriesApi - object-oriented interface
 * @export
 * @class SeriesApi
 * @extends {BaseAPI}
 */
export class SeriesApi extends BaseAPI {
    /**
     * 
     * @summary Get books by the series id.
     * @param {string} seriesId The series id of the books to get.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdBooksGet(seriesId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a series.
     * @param {string} seriesId The id of the seriesto delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdDelete(seriesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get series by its id.
     * @param {string} seriesId The id of the series to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdGet(seriesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all series summaries.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSummaryGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSummaryGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VersionApi.versionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @summary Gets the backend version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public versionGet(options?: RawAxiosRequestConfig) {
        return VersionApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}




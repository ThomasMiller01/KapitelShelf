/* tslint:disable */
/* eslint-disable */
/**
 * KapitelShelf.Api, Version=0.3.1.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * The Author DTO.
 * @export
 * @interface AuthorDTO
 */
export interface AuthorDTO {
    /**
     * Gets or sets the author id.
     * @type {string}
     * @memberof AuthorDTO
     */
    'id'?: string;
    /**
     * Gets or sets or set the first name.
     * @type {string}
     * @memberof AuthorDTO
     */
    'firstName'?: string | null;
    /**
     * Gets or sets the last name.
     * @type {string}
     * @memberof AuthorDTO
     */
    'lastName'?: string | null;
}
/**
 * The book dto.
 * @export
 * @interface BookDTO
 */
export interface BookDTO {
    /**
     * Gets or sets the book id.
     * @type {string}
     * @memberof BookDTO
     */
    'id'?: string;
    /**
     * Gets or sets the title.
     * @type {string}
     * @memberof BookDTO
     */
    'title'?: string | null;
    /**
     * Gets or sets the description.
     * @type {string}
     * @memberof BookDTO
     */
    'description'?: string | null;
    /**
     * Gets or sets the release date.
     * @type {string}
     * @memberof BookDTO
     */
    'releaseDate'?: string | null;
    /**
     * Gets or sets the page number.
     * @type {number}
     * @memberof BookDTO
     */
    'pageNumber'?: number | null;
    /**
     * 
     * @type {SeriesDTO}
     * @memberof BookDTO
     */
    'series'?: SeriesDTO;
    /**
     * Gets or sets the series number.
     * @type {number}
     * @memberof BookDTO
     */
    'seriesNumber'?: number;
    /**
     * 
     * @type {AuthorDTO}
     * @memberof BookDTO
     */
    'author'?: AuthorDTO;
    /**
     * Gets or sets the categories.
     * @type {Array<CategoryDTO>}
     * @memberof BookDTO
     */
    'categories'?: Array<CategoryDTO> | null;
    /**
     * Gets or sets the tags.
     * @type {Array<TagDTO>}
     * @memberof BookDTO
     */
    'tags'?: Array<TagDTO> | null;
    /**
     * 
     * @type {FileInfoDTO}
     * @memberof BookDTO
     */
    'cover'?: FileInfoDTO;
    /**
     * 
     * @type {LocationDTO}
     * @memberof BookDTO
     */
    'location'?: LocationDTO;
}
/**
 * The paginated result.
 * @export
 * @interface BookDTOPagedResult
 */
export interface BookDTOPagedResult {
    /**
     * Gets or sets the items.
     * @type {Array<BookDTO>}
     * @memberof BookDTOPagedResult
     */
    'items'?: Array<BookDTO> | null;
    /**
     * Gets or sets the total number of items.
     * @type {number}
     * @memberof BookDTOPagedResult
     */
    'totalCount'?: number;
}
/**
 * The category dto.
 * @export
 * @interface CategoryDTO
 */
export interface CategoryDTO {
    /**
     * Gets or sets the category id.
     * @type {string}
     * @memberof CategoryDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CategoryDTO
     */
    'name'?: string | null;
}
/**
 * The cloud storage dto.
 * @export
 * @interface CloudStorageDTO
 */
export interface CloudStorageDTO {
    /**
     * Gets or sets the author id.
     * @type {string}
     * @memberof CloudStorageDTO
     */
    'id'?: string;
    /**
     * 
     * @type {CloudTypeDTO}
     * @memberof CloudStorageDTO
     */
    'type'?: CloudTypeDTO;
    /**
     * Gets or sets a value indicating whether this storage needs re-authentication.
     * @type {boolean}
     * @memberof CloudStorageDTO
     */
    'needsReAuthentication'?: boolean;
    /**
     * Gets or sets the cloud directory to mirror.
     * @type {string}
     * @memberof CloudStorageDTO
     */
    'cloudDirectory'?: string | null;
    /**
     * Gets or sets the cloud owner email.
     * @type {string}
     * @memberof CloudStorageDTO
     */
    'cloudOwnerEmail'?: string | null;
    /**
     * Gets or sets the cloud owner name.
     * @type {string}
     * @memberof CloudStorageDTO
     */
    'cloudOwnerName'?: string | null;
    /**
     * Gets or sets a value indicating whether the data for this storage is downloaded.
     * @type {boolean}
     * @memberof CloudStorageDTO
     */
    'isDownloaded'?: boolean;
}


/**
 * The cloud storage directory dto.
 * @export
 * @interface CloudStorageDirectoryDTO
 */
export interface CloudStorageDirectoryDTO {
    /**
     * Gets or sets the directory id.
     * @type {string}
     * @memberof CloudStorageDirectoryDTO
     */
    'id'?: string | null;
    /**
     * Gets or sets the path to the directory.
     * @type {string}
     * @memberof CloudStorageDirectoryDTO
     */
    'path'?: string | null;
    /**
     * Gets or sets the directory name.
     * @type {string}
     * @memberof CloudStorageDirectoryDTO
     */
    'name'?: string | null;
    /**
     * Gets or sets the last modified time.
     * @type {string}
     * @memberof CloudStorageDirectoryDTO
     */
    'modifiedTime'?: string;
}
/**
 * The cloud type dto.
 * @export
 * @enum {number}
 */

export const CloudTypeDTO = {
    NUMBER_0: 0
} as const;

export type CloudTypeDTO = typeof CloudTypeDTO[keyof typeof CloudTypeDTO];


/**
 * The configure cloud dto.
 * @export
 * @interface ConfigureCloudDTO
 */
export interface ConfigureCloudDTO {
    /**
     * Gets or sets the OAuth client id.
     * @type {string}
     * @memberof ConfigureCloudDTO
     */
    'oAuthClientId'?: string | null;
}
/**
 * The create dto for a author.
 * @export
 * @interface CreateAuthorDTO
 */
export interface CreateAuthorDTO {
    /**
     * Gets or sets or set the first name.
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'firstName'?: string | null;
    /**
     * Gets or sets the last name.
     * @type {string}
     * @memberof CreateAuthorDTO
     */
    'lastName'?: string | null;
}
/**
 * The create dto for a book.
 * @export
 * @interface CreateBookDTO
 */
export interface CreateBookDTO {
    /**
     * Gets or sets the title.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'title'?: string | null;
    /**
     * Gets or sets the description.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'description'?: string | null;
    /**
     * Gets or sets the release date.
     * @type {string}
     * @memberof CreateBookDTO
     */
    'releaseDate'?: string | null;
    /**
     * Gets or sets the page number.
     * @type {number}
     * @memberof CreateBookDTO
     */
    'pageNumber'?: number | null;
    /**
     * 
     * @type {CreateSeriesDTO}
     * @memberof CreateBookDTO
     */
    'series'?: CreateSeriesDTO;
    /**
     * Gets or sets the series number.
     * @type {number}
     * @memberof CreateBookDTO
     */
    'seriesNumber'?: number | null;
    /**
     * 
     * @type {CreateAuthorDTO}
     * @memberof CreateBookDTO
     */
    'author'?: CreateAuthorDTO;
    /**
     * Gets or sets the categories.
     * @type {Array<CreateCategoryDTO>}
     * @memberof CreateBookDTO
     */
    'categories'?: Array<CreateCategoryDTO> | null;
    /**
     * Gets or sets the tags.
     * @type {Array<CreateTagDTO>}
     * @memberof CreateBookDTO
     */
    'tags'?: Array<CreateTagDTO> | null;
    /**
     * 
     * @type {CreateLocationDTO}
     * @memberof CreateBookDTO
     */
    'location'?: CreateLocationDTO;
}
/**
 * The create dto for a category.
 * @export
 * @interface CreateCategoryDTO
 */
export interface CreateCategoryDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateCategoryDTO
     */
    'name'?: string | null;
}
/**
 * The create model for a location.
 * @export
 * @interface CreateLocationDTO
 */
export interface CreateLocationDTO {
    /**
     * 
     * @type {LocationTypeDTO}
     * @memberof CreateLocationDTO
     */
    'type'?: LocationTypeDTO;
    /**
     * Gets or sets the url.
     * @type {string}
     * @memberof CreateLocationDTO
     */
    'url'?: string | null;
}


/**
 * The create dto for a series.
 * @export
 * @interface CreateSeriesDTO
 */
export interface CreateSeriesDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateSeriesDTO
     */
    'name'?: string | null;
}
/**
 * The create dto for a tag.
 * @export
 * @interface CreateTagDTO
 */
export interface CreateTagDTO {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof CreateTagDTO
     */
    'name'?: string | null;
}
/**
 * The create dto for a user.
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
    /**
     * Gets or sets the username.
     * @type {string}
     * @memberof CreateUserDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {ProfileImageTypeDTO}
     * @memberof CreateUserDTO
     */
    'image'?: ProfileImageTypeDTO;
    /**
     * Gets or sets the profile color.
     * @type {string}
     * @memberof CreateUserDTO
     */
    'color'?: string | null;
}


/**
 * Gets or sets the fileinfo dto.
 * @export
 * @interface FileInfoDTO
 */
export interface FileInfoDTO {
    /**
     * Gets or sets the fileinfo id.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'id'?: string;
    /**
     * Gets or sets the file path.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'filePath'?: string | null;
    /**
     * Gets or sets the file size in bytes.
     * @type {number}
     * @memberof FileInfoDTO
     */
    'fileSizeBytes'?: number;
    /**
     * Gets or sets the mimetype.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'mimeType'?: string | null;
    /**
     * Gets or sets the sha256 checksum.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'sha256'?: string | null;
    /**
     * Gets the filename.
     * @type {string}
     * @memberof FileInfoDTO
     */
    'fileName'?: string | null;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const FinishedReasonNullable = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type FinishedReasonNullable = typeof FinishedReasonNullable[keyof typeof FinishedReasonNullable];


/**
 * The import book dto.
 * @export
 * @interface ImportBookDTO
 */
export interface ImportBookDTO {
    /**
     * Gets or sets the book id.
     * @type {string}
     * @memberof ImportBookDTO
     */
    'id'?: string;
    /**
     * Gets or sets the book title.
     * @type {string}
     * @memberof ImportBookDTO
     */
    'title'?: string | null;
}
/**
 * Represents the result of an import operation, including details about the success or failure of the process.
 * @export
 * @interface ImportResultDTO
 */
export interface ImportResultDTO {
    /**
     * Gets or sets a value indicating whether it was a bulk import.
     * @type {boolean}
     * @memberof ImportResultDTO
     */
    'isBulkImport'?: boolean;
    /**
     * Gets or sets any errors encountered during the import process.
     * @type {Array<string>}
     * @memberof ImportResultDTO
     */
    'errors'?: Array<string> | null;
    /**
     * Gets or sets the successfully imported books, containing their IDs and titles.
     * @type {Array<ImportBookDTO>}
     * @memberof ImportResultDTO
     */
    'importedBooks'?: Array<ImportBookDTO> | null;
}
/**
 * The location dto.
 * @export
 * @interface LocationDTO
 */
export interface LocationDTO {
    /**
     * Gets or sets the locaiton id.
     * @type {string}
     * @memberof LocationDTO
     */
    'id'?: string;
    /**
     * 
     * @type {LocationTypeDTO}
     * @memberof LocationDTO
     */
    'type'?: LocationTypeDTO;
    /**
     * Gets or sets the url.
     * @type {string}
     * @memberof LocationDTO
     */
    'url'?: string | null;
    /**
     * 
     * @type {FileInfoDTO}
     * @memberof LocationDTO
     */
    'fileInfo'?: FileInfoDTO;
}


/**
 * The location type enum.
 * @export
 * @enum {number}
 */

export const LocationTypeDTO = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type LocationTypeDTO = typeof LocationTypeDTO[keyof typeof LocationTypeDTO];


/**
 * The metadata DTO class.
 * @export
 * @interface MetadataDTO
 */
export interface MetadataDTO {
    /**
     * Gets or sets the title of the book.
     * @type {string}
     * @memberof MetadataDTO
     */
    'title'?: string | null;
    /**
     * Gets or sets the description of the book.
     * @type {string}
     * @memberof MetadataDTO
     */
    'description'?: string | null;
    /**
     * Gets or sets the name of the series of the book.
     * @type {string}
     * @memberof MetadataDTO
     */
    'series'?: string | null;
    /**
     * Gets or sets the number of the book in the series.
     * @type {number}
     * @memberof MetadataDTO
     */
    'volume'?: number | null;
    /**
     * Gets or sets the authors of the book.
     * @type {Array<string>}
     * @memberof MetadataDTO
     */
    'authors'?: Array<string> | null;
    /**
     * Gets or sets the release date of the book.
     * @type {string}
     * @memberof MetadataDTO
     */
    'releaseDate'?: string | null;
    /**
     * Gets or sets the number of pages of the book.
     * @type {number}
     * @memberof MetadataDTO
     */
    'pages'?: number | null;
    /**
     * Gets or sets the cover url of the book.
     * @type {string}
     * @memberof MetadataDTO
     */
    'coverUrl'?: string | null;
    /**
     * Gets or sets the categories of the book.
     * @type {Array<string>}
     * @memberof MetadataDTO
     */
    'categories'?: Array<string> | null;
    /**
     * Gets or sets the tags of the book.
     * @type {Array<string>}
     * @memberof MetadataDTO
     */
    'tags'?: Array<string> | null;
    /**
     * Gets or sets the score for how well the title matches the search query.
     * @type {number}
     * @memberof MetadataDTO
     */
    'titleMatchScore'?: number;
    /**
     * Gets or sets the score for how complete the metadata is.
     * @type {number}
     * @memberof MetadataDTO
     */
    'completenessScore'?: number;
}
/**
 * The metadata sources for book metadata scraping.
 * @export
 * @enum {number}
 */

export const MetadataSources = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type MetadataSources = typeof MetadataSources[keyof typeof MetadataSources];


/**
 * The settings dto.
 * @export
 * @interface ObjectSettingsDTO
 */
export interface ObjectSettingsDTO {
    /**
     * Gets or sets the id.
     * @type {string}
     * @memberof ObjectSettingsDTO
     */
    'id'?: string;
    /**
     * Gets or sets the setting key.
     * @type {string}
     * @memberof ObjectSettingsDTO
     */
    'key'?: string | null;
    /**
     * Gets or sets the setting value.
     * @type {any}
     * @memberof ObjectSettingsDTO
     */
    'value'?: any | null;
}
/**
 * The profile image enum.
 * @export
 * @enum {number}
 */

export const ProfileImageTypeDTO = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10
} as const;

export type ProfileImageTypeDTO = typeof ProfileImageTypeDTO[keyof typeof ProfileImageTypeDTO];


/**
 * The series dto.
 * @export
 * @interface SeriesDTO
 */
export interface SeriesDTO {
    /**
     * Gets or sets the series id.
     * @type {string}
     * @memberof SeriesDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof SeriesDTO
     */
    'name'?: string | null;
    /**
     * Gets or sets the creation time.
     * @type {string}
     * @memberof SeriesDTO
     */
    'createdAt'?: string;
    /**
     * Gets or sets the update time.
     * @type {string}
     * @memberof SeriesDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {BookDTO}
     * @memberof SeriesDTO
     */
    'lastVolume'?: BookDTO;
    /**
     * Gets or sets the total number of books.
     * @type {number}
     * @memberof SeriesDTO
     */
    'totalBooks'?: number | null;
}
/**
 * The paginated result.
 * @export
 * @interface SeriesDTOPagedResult
 */
export interface SeriesDTOPagedResult {
    /**
     * Gets or sets the items.
     * @type {Array<SeriesDTO>}
     * @memberof SeriesDTOPagedResult
     */
    'items'?: Array<SeriesDTO> | null;
    /**
     * Gets or sets the total number of items.
     * @type {number}
     * @memberof SeriesDTOPagedResult
     */
    'totalCount'?: number;
}
/**
 * The series watchlist dto.
 * @export
 * @interface SeriesWatchlistDTO
 */
export interface SeriesWatchlistDTO {
    /**
     * Gets or sets the id.
     * @type {string}
     * @memberof SeriesWatchlistDTO
     */
    'id'?: string;
    /**
     * 
     * @type {SeriesDTO}
     * @memberof SeriesWatchlistDTO
     */
    'series'?: SeriesDTO;
    /**
     * Gets or sets the watchlist items for this series.
     * @type {Array<BookDTO>}
     * @memberof SeriesWatchlistDTO
     */
    'items'?: Array<BookDTO> | null;
}
/**
 * The tag dto.
 * @export
 * @interface TagDTO
 */
export interface TagDTO {
    /**
     * Gets or sets the tag id.
     * @type {string}
     * @memberof TagDTO
     */
    'id'?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof TagDTO
     */
    'name'?: string | null;
}
/**
 * The task dto.
 * @export
 * @interface TaskDTO
 */
export interface TaskDTO {
    /**
     * Gets or sets the task name.
     * @type {string}
     * @memberof TaskDTO
     */
    'name'?: string | null;
    /**
     * Gets or sets the category.
     * @type {string}
     * @memberof TaskDTO
     */
    'category'?: string | null;
    /**
     * Gets or sets the description.
     * @type {string}
     * @memberof TaskDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {TaskState}
     * @memberof TaskDTO
     */
    'state'?: TaskState;
    /**
     * Gets or sets the job progress, if the task is current running.
     * @type {number}
     * @memberof TaskDTO
     */
    'progress'?: number | null;
    /**
     * Gets or sets the job message, if the task is current running.
     * @type {string}
     * @memberof TaskDTO
     */
    'message'?: string | null;
    /**
     * Gets or sets a value indicating, whether the cancelation of the task is requested.
     * @type {boolean}
     * @memberof TaskDTO
     */
    'isCancelationRequested'?: boolean | null;
    /**
     * 
     * @type {FinishedReasonNullable}
     * @memberof TaskDTO
     */
    'finishedReason'?: FinishedReasonNullable | null;
    /**
     * Gets or sets a value indicating whether the task is a single execution or continued.
     * @type {boolean}
     * @memberof TaskDTO
     */
    'isSingleExecution'?: boolean;
    /**
     * Gets or sets a value indicating whether the task is a cron job.
     * @type {boolean}
     * @memberof TaskDTO
     */
    'isCronJob'?: boolean;
    /**
     * Gets or sets the cron expression, if the job is a cron job.
     * @type {string}
     * @memberof TaskDTO
     */
    'cronExpression'?: string | null;
    /**
     * Gets or sets the time offset when the task was last executed.
     * @type {string}
     * @memberof TaskDTO
     */
    'lastExecution'?: string | null;
    /**
     * Gets or sets the time offset when the task will be next executed.
     * @type {string}
     * @memberof TaskDTO
     */
    'nextExecution'?: string | null;
}


/**
 * The task state enum.
 * @export
 * @enum {number}
 */

export const TaskState = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type TaskState = typeof TaskState[keyof typeof TaskState];


/**
 * The user dto.
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * Gets or sets the locaiton id.
     * @type {string}
     * @memberof UserDTO
     */
    'id'?: string;
    /**
     * Gets or sets the user name.
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {ProfileImageTypeDTO}
     * @memberof UserDTO
     */
    'image'?: ProfileImageTypeDTO;
    /**
     * Gets or sets the profile color.
     * @type {string}
     * @memberof UserDTO
     */
    'color'?: string | null;
}


/**
 * The user dto.
 * @export
 * @interface UserSettingDTO
 */
export interface UserSettingDTO {
    /**
     * Gets or sets the user id.
     * @type {string}
     * @memberof UserSettingDTO
     */
    'id'?: string;
    /**
     * Gets or sets the setting key.
     * @type {string}
     * @memberof UserSettingDTO
     */
    'key'?: string | null;
    /**
     * Gets or sets the setting value.
     * @type {string}
     * @memberof UserSettingDTO
     */
    'value'?: string | null;
    /**
     * 
     * @type {UserSettingValueTypeDTO}
     * @memberof UserSettingDTO
     */
    'type'?: UserSettingValueTypeDTO;
}


/**
 * The user setting value type enum.
 * @export
 * @enum {number}
 */

export const UserSettingValueTypeDTO = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type UserSettingValueTypeDTO = typeof UserSettingValueTypeDTO[keyof typeof UserSettingValueTypeDTO];



/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverGet: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdCoverGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/cover`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverPost: async (bookId: string, coverFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdCoverPost', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/cover`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (coverFile !== undefined) { 
                localVarFormParams.append('coverFile', coverFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdDelete: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdDelete', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFileGet: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdFileGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/file`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFilePost: async (bookId: string, bookFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdFilePost', 'bookId', bookId)
            const localVarPath = `/books/{bookId}/file`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (bookFile !== undefined) { 
                localVarFormParams.append('bookFile', bookFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdGet: async (bookId: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdGet', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a book.
         * @param {string} bookId The id of the book to update.
         * @param {BookDTO} [bookDTO] The updated book.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdPut: async (bookId: string, bookDTO?: BookDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('booksBookIdPut', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a new book from its asin.
         * @param {string} [asin] The asin of the book to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportAsinPost: async (asin?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books/import/asin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportPost: async (bookFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (bookFile !== undefined) { 
                localVarFormParams.append('bookFile', bookFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost: async (createBookDTO?: CreateBookDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksSearchGet: async (searchterm?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchterm !== undefined) {
                localVarQueryParameter['searchterm'] = searchterm;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksSearchSuggestionsGet: async (searchterm?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchterm !== undefined) {
                localVarQueryParameter['searchterm'] = searchterm;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdCoverGet(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdCoverGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdCoverPost(bookId, coverFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdCoverPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdDelete(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdFileGet(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdFilePost(bookId, bookFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdGet(bookId: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdGet(bookId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a book.
         * @param {string} bookId The id of the book to update.
         * @param {BookDTO} [bookDTO] The updated book.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksBookIdPut(bookId: string, bookDTO?: BookDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksBookIdPut(bookId, bookDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksBookIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import a new book from its asin.
         * @param {string} [asin] The asin of the book to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksImportAsinPost(asin?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksImportAsinPost(asin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksImportAsinPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksImportPost(bookFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksImportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(createBookDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksSearchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksSearchGet(searchterm, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksSearchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksSearchSuggestionsGet(searchterm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BooksApi.booksSearchSuggestionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the cover for a book.
         * @param {string} bookId The id of the book to get the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdCoverGet(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add the cover for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [coverFile] The cover image file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdCoverPost(bookId, coverFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a book.
         * @param {string} bookId The id of the book to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdDelete(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the file for a book.
         * @param {string} bookId The id of the book to get the file for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdFileGet(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add the file for a book.
         * @param {string} bookId The id of the book to get.
         * @param {File} [bookFile] The book file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdFilePost(bookId, bookFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get book by the id.
         * @param {string} bookId The id of the book to get.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdGet(bookId: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.booksBookIdGet(bookId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a book.
         * @param {string} bookId The id of the book to update.
         * @param {BookDTO} [bookDTO] The updated book.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksBookIdPut(bookId: string, bookDTO?: BookDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksBookIdPut(bookId, bookDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all books.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.booksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a new book from its asin.
         * @param {string} [asin] The asin of the book to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportAsinPost(asin?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImportResultDTO> {
            return localVarFp.booksImportAsinPost(asin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a new book.
         * @param {File} [bookFile] Thebook file to import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig): AxiosPromise<ImportResultDTO> {
            return localVarFp.booksImportPost(bookFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new book.
         * @param {CreateBookDTO} [createBookDTO] The create book dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.booksPost(createBookDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksSearchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.booksSearchGet(searchterm, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksSearchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.booksSearchSuggestionsGet(searchterm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary Get the cover for a book.
     * @param {string} bookId The id of the book to get the cover for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdCoverGet(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdCoverGet(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add the cover for a book.
     * @param {string} bookId The id of the book to get.
     * @param {File} [coverFile] The cover image file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdCoverPost(bookId: string, coverFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdCoverPost(bookId, coverFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a book.
     * @param {string} bookId The id of the book to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdDelete(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdDelete(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the file for a book.
     * @param {string} bookId The id of the book to get the file for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdFileGet(bookId: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdFileGet(bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add the file for a book.
     * @param {string} bookId The id of the book to get.
     * @param {File} [bookFile] The book file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdFilePost(bookId: string, bookFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdFilePost(bookId, bookFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get book by the id.
     * @param {string} bookId The id of the book to get.
     * @param {string} [userId] The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdGet(bookId: string, userId?: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdGet(bookId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a book.
     * @param {string} bookId The id of the book to update.
     * @param {BookDTO} [bookDTO] The updated book.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksBookIdPut(bookId: string, bookDTO?: BookDTO, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksBookIdPut(bookId, bookDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all books.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksGet(options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import a new book from its asin.
     * @param {string} [asin] The asin of the book to import.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksImportAsinPost(asin?: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksImportAsinPost(asin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import a new book.
     * @param {File} [bookFile] Thebook file to import.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksImportPost(bookFile?: File, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksImportPost(bookFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new book.
     * @param {CreateBookDTO} [createBookDTO] The create book dto.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksPost(createBookDTO?: CreateBookDTO, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksPost(createBookDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search books with a search term.
     * @param {string} [searchterm] The search term.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksSearchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksSearchGet(searchterm, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search suggestions with a search term.
     * @param {string} [searchterm] The search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public booksSearchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig) {
        return BooksApiFp(this.configuration).booksSearchSuggestionsGet(searchterm, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CloudStorageApi - axios parameter creator
 * @export
 */
export const CloudStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Configure the cloud storage.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {ConfigureCloudDTO} [configureCloudDTO] The configure cloud dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageConfigurePut: async (cloudType?: CloudTypeDTO, configureCloudDTO?: ConfigureCloudDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudstorage/configure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cloudType !== undefined) {
                localVarQueryParameter['cloudType'] = cloudType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(configureCloudDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if cloud storage is configured.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageIsconfiguredGet: async (cloudType?: CloudTypeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudstorage/isconfigured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cloudType !== undefined) {
                localVarQueryParameter['cloudType'] = cloudType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all cloud storages.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesGet: async (cloudType?: CloudTypeDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudstorage/storages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cloudType !== undefined) {
                localVarQueryParameter['cloudType'] = cloudType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Configure the cloud directory.
         * @param {string} storageId The cloud storage id.
         * @param {string} [directory] The cloud directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdConfigureDirectoryPut: async (storageId: string, directory?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdConfigureDirectoryPut', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}/configure/directory`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directory !== undefined) {
                localVarQueryParameter['directory'] = directory;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdDelete: async (storageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdDelete', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdGet: async (storageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdGet', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all directories.
         * @param {string} storageId The cloud storage id.
         * @param {string} [path] The start path of the directories to list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdListDirectoriesGet: async (storageId: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdListDirectoriesGet', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}/list/directories`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Scan a cloud storage for new books to import.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdScanPut: async (storageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdScanPut', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}/scan`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync a cloud storage.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdSyncPut: async (storageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageId' is not null or undefined
            assertParamExists('cloudstorageStoragesStorageIdSyncPut', 'storageId', storageId)
            const localVarPath = `/cloudstorage/storages/{storageId}/sync`
                .replace(`{${"storageId"}}`, encodeURIComponent(String(storageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudStorageApi - functional programming interface
 * @export
 */
export const CloudStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Configure the cloud storage.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {ConfigureCloudDTO} [configureCloudDTO] The configure cloud dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageConfigurePut(cloudType?: CloudTypeDTO, configureCloudDTO?: ConfigureCloudDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageConfigurePut(cloudType, configureCloudDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageConfigurePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check if cloud storage is configured.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageIsconfiguredGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageIsconfiguredGet(cloudType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageIsconfiguredGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all cloud storages.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudStorageDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesGet(cloudType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Configure the cloud directory.
         * @param {string} storageId The cloud storage id.
         * @param {string} [directory] The cloud directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId: string, directory?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId, directory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdConfigureDirectoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdDelete(storageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdDelete(storageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdGet(storageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudStorageDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdGet(storageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all directories.
         * @param {string} storageId The cloud storage id.
         * @param {string} [path] The start path of the directories to list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdListDirectoriesGet(storageId: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudStorageDirectoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdListDirectoriesGet(storageId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdListDirectoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Scan a cloud storage for new books to import.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdScanPut(storageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdScanPut(storageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdScanPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sync a cloud storage.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageStoragesStorageIdSyncPut(storageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageStoragesStorageIdSyncPut(storageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CloudStorageApi.cloudstorageStoragesStorageIdSyncPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CloudStorageApi - factory interface
 * @export
 */
export const CloudStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudStorageApiFp(configuration)
    return {
        /**
         * 
         * @summary Configure the cloud storage.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {ConfigureCloudDTO} [configureCloudDTO] The configure cloud dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageConfigurePut(cloudType?: CloudTypeDTO, configureCloudDTO?: ConfigureCloudDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageConfigurePut(cloudType, configureCloudDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if cloud storage is configured.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageIsconfiguredGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.cloudstorageIsconfiguredGet(cloudType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all cloud storages.
         * @param {CloudTypeDTO} [cloudType] The cloud type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudStorageDTO>> {
            return localVarFp.cloudstorageStoragesGet(cloudType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Configure the cloud directory.
         * @param {string} storageId The cloud storage id.
         * @param {string} [directory] The cloud directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId: string, directory?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId, directory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdDelete(storageId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageStoragesStorageIdDelete(storageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a cloud storage.
         * @param {string} storageId The cloud storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdGet(storageId: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudStorageDTO> {
            return localVarFp.cloudstorageStoragesStorageIdGet(storageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all directories.
         * @param {string} storageId The cloud storage id.
         * @param {string} [path] The start path of the directories to list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdListDirectoriesGet(storageId: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CloudStorageDirectoryDTO>> {
            return localVarFp.cloudstorageStoragesStorageIdListDirectoriesGet(storageId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Scan a cloud storage for new books to import.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdScanPut(storageId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageStoragesStorageIdScanPut(storageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync a cloud storage.
         * @param {string} storageId The storage id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageStoragesStorageIdSyncPut(storageId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageStoragesStorageIdSyncPut(storageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudStorageApi - object-oriented interface
 * @export
 * @class CloudStorageApi
 * @extends {BaseAPI}
 */
export class CloudStorageApi extends BaseAPI {
    /**
     * 
     * @summary Configure the cloud storage.
     * @param {CloudTypeDTO} [cloudType] The cloud type.
     * @param {ConfigureCloudDTO} [configureCloudDTO] The configure cloud dto.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageConfigurePut(cloudType?: CloudTypeDTO, configureCloudDTO?: ConfigureCloudDTO, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageConfigurePut(cloudType, configureCloudDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if cloud storage is configured.
     * @param {CloudTypeDTO} [cloudType] The cloud type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageIsconfiguredGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageIsconfiguredGet(cloudType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all cloud storages.
     * @param {CloudTypeDTO} [cloudType] The cloud type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesGet(cloudType?: CloudTypeDTO, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesGet(cloudType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Configure the cloud directory.
     * @param {string} storageId The cloud storage id.
     * @param {string} [directory] The cloud directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId: string, directory?: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdConfigureDirectoryPut(storageId, directory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a cloud storage.
     * @param {string} storageId The cloud storage id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdDelete(storageId: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdDelete(storageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a cloud storage.
     * @param {string} storageId The cloud storage id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdGet(storageId: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdGet(storageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all directories.
     * @param {string} storageId The cloud storage id.
     * @param {string} [path] The start path of the directories to list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdListDirectoriesGet(storageId: string, path?: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdListDirectoriesGet(storageId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Scan a cloud storage for new books to import.
     * @param {string} storageId The storage id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdScanPut(storageId: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdScanPut(storageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync a cloud storage.
     * @param {string} storageId The storage id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudStorageApi
     */
    public cloudstorageStoragesStorageIdSyncPut(storageId: string, options?: RawAxiosRequestConfig) {
        return CloudStorageApiFp(this.configuration).cloudstorageStoragesStorageIdSyncPut(storageId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download images server-side as a proxy for the client.
         * @param {string} [coverUrl] The url of the cover to proxy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataProxyCoverGet: async (coverUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/proxy-cover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (coverUrl !== undefined) {
                localVarQueryParameter['coverUrl'] = coverUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch the metadata for a book from the specified source.
         * @param {MetadataSources} source The source from which to fetch the metadata.
         * @param {string} [title] The title of the book to scrape metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSourceGet: async (source: MetadataSources, title?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'source' is not null or undefined
            assertParamExists('metadataSourceGet', 'source', source)
            const localVarPath = `/metadata/{source}`
                .replace(`{${"source"}}`, encodeURIComponent(String(source)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Download images server-side as a proxy for the client.
         * @param {string} [coverUrl] The url of the cover to proxy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataProxyCoverGet(coverUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataProxyCoverGet(coverUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.metadataProxyCoverGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch the metadata for a book from the specified source.
         * @param {MetadataSources} source The source from which to fetch the metadata.
         * @param {string} [title] The title of the book to scrape metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataSourceGet(source: MetadataSources, title?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetadataDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataSourceGet(source, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetadataApi.metadataSourceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * 
         * @summary Download images server-side as a proxy for the client.
         * @param {string} [coverUrl] The url of the cover to proxy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataProxyCoverGet(coverUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.metadataProxyCoverGet(coverUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch the metadata for a book from the specified source.
         * @param {MetadataSources} source The source from which to fetch the metadata.
         * @param {string} [title] The title of the book to scrape metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataSourceGet(source: MetadataSources, title?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<MetadataDTO>> {
            return localVarFp.metadataSourceGet(source, title, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * 
     * @summary Download images server-side as a proxy for the client.
     * @param {string} [coverUrl] The url of the cover to proxy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataProxyCoverGet(coverUrl?: string, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataProxyCoverGet(coverUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch the metadata for a book from the specified source.
     * @param {MetadataSources} source The source from which to fetch the metadata.
     * @param {string} [title] The title of the book to scrape metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public metadataSourceGet(source: MetadataSources, title?: string, options?: RawAxiosRequestConfig) {
        return MetadataApiFp(this.configuration).metadataSourceGet(source, title, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OneDriveApi - axios parameter creator
 * @export
 */
export const OneDriveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Callback for the OneDrive OAuth flow.
         * @param {string} [code] The OAuth callback code.
         * @param {string} [state] The OAuth callback state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageOnedriveOauthCallbackGet: async (code?: string, state?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudstorage/onedrive/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redirect to the OneDrive OAuth url.
         * @param {string} [redirectUrl] The url to redirect to after the OAuth flow finished.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageOnedriveOauthGet: async (redirectUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudstorage/onedrive/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUrl !== undefined) {
                localVarQueryParameter['redirectUrl'] = redirectUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OneDriveApi - functional programming interface
 * @export
 */
export const OneDriveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OneDriveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Callback for the OneDrive OAuth flow.
         * @param {string} [code] The OAuth callback code.
         * @param {string} [state] The OAuth callback state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageOnedriveOauthCallbackGet(code?: string, state?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageOnedriveOauthCallbackGet(code, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OneDriveApi.cloudstorageOnedriveOauthCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Redirect to the OneDrive OAuth url.
         * @param {string} [redirectUrl] The url to redirect to after the OAuth flow finished.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudstorageOnedriveOauthGet(redirectUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudstorageOnedriveOauthGet(redirectUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OneDriveApi.cloudstorageOnedriveOauthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OneDriveApi - factory interface
 * @export
 */
export const OneDriveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OneDriveApiFp(configuration)
    return {
        /**
         * 
         * @summary Callback for the OneDrive OAuth flow.
         * @param {string} [code] The OAuth callback code.
         * @param {string} [state] The OAuth callback state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageOnedriveOauthCallbackGet(code?: string, state?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cloudstorageOnedriveOauthCallbackGet(code, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redirect to the OneDrive OAuth url.
         * @param {string} [redirectUrl] The url to redirect to after the OAuth flow finished.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudstorageOnedriveOauthGet(redirectUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cloudstorageOnedriveOauthGet(redirectUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OneDriveApi - object-oriented interface
 * @export
 * @class OneDriveApi
 * @extends {BaseAPI}
 */
export class OneDriveApi extends BaseAPI {
    /**
     * 
     * @summary Callback for the OneDrive OAuth flow.
     * @param {string} [code] The OAuth callback code.
     * @param {string} [state] The OAuth callback state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OneDriveApi
     */
    public cloudstorageOnedriveOauthCallbackGet(code?: string, state?: string, options?: RawAxiosRequestConfig) {
        return OneDriveApiFp(this.configuration).cloudstorageOnedriveOauthCallbackGet(code, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redirect to the OneDrive OAuth url.
     * @param {string} [redirectUrl] The url to redirect to after the OAuth flow finished.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OneDriveApi
     */
    public cloudstorageOnedriveOauthGet(redirectUrl?: string, options?: RawAxiosRequestConfig) {
        return OneDriveApiFp(this.configuration).cloudstorageOnedriveOauthGet(redirectUrl, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchGet: async (searchterm?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchterm !== undefined) {
                localVarQueryParameter['searchterm'] = searchterm;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchSuggestionsGet: async (searchterm?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchterm !== undefined) {
                localVarQueryParameter['searchterm'] = searchterm;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async searchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGet(searchterm, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.searchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async searchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSuggestionsGet(searchterm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.searchSuggestionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Search books with a search term.
         * @param {string} [searchterm] The search term.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.searchGet(searchterm, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search suggestions with a search term.
         * @param {string} [searchterm] The search term.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.searchSuggestionsGet(searchterm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Search books with a search term.
     * @param {string} [searchterm] The search term.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchGet(searchterm?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchGet(searchterm, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search suggestions with a search term.
     * @param {string} [searchterm] The search term.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSuggestionsGet(searchterm?: string, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchSuggestionsGet(searchterm, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeriesApi - axios parameter creator
 * @export
 */
export const SeriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all series.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesGet: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/series`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search series with the series name.
         * @param {string} [name] The series name.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSearchGet: async (name?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/series/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search suggestions with the series name.
         * @param {string} [name] The series name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSearchSuggestionsGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/series/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdBooksGet: async (seriesId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdBooksGet', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}/books`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdDelete: async (seriesId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdDelete', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdGet: async (seriesId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdGet', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Merge the series into the target series.
         * @param {string} seriesId The source series id.
         * @param {string} targetSeriesId The target series id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdMergeTargetSeriesIdPut: async (seriesId: string, targetSeriesId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdMergeTargetSeriesIdPut', 'seriesId', seriesId)
            // verify required parameter 'targetSeriesId' is not null or undefined
            assertParamExists('seriesSeriesIdMergeTargetSeriesIdPut', 'targetSeriesId', targetSeriesId)
            const localVarPath = `/series/{seriesId}/merge/{targetSeriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)))
                .replace(`{${"targetSeriesId"}}`, encodeURIComponent(String(targetSeriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a series.
         * @param {string} seriesId The id of the series to update.
         * @param {SeriesDTO} [seriesDTO] The updated series.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdPut: async (seriesId: string, seriesDTO?: SeriesDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('seriesSeriesIdPut', 'seriesId', seriesId)
            const localVarPath = `/series/{seriesId}`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seriesDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeriesApi - functional programming interface
 * @export
 */
export const SeriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all series.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeriesDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesGet(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search series with the series name.
         * @param {string} [name] The series name.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSearchGet(name?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSearchGet(name, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search suggestions with the series name.
         * @param {string} [name] The series name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSearchSuggestionsGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BookDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSearchSuggestionsGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSearchSuggestionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdBooksGet(seriesId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdBooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdDelete(seriesId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeriesDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdGet(seriesId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Merge the series into the target series.
         * @param {string} seriesId The source series id.
         * @param {string} targetSeriesId The target series id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdMergeTargetSeriesIdPut(seriesId: string, targetSeriesId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdMergeTargetSeriesIdPut(seriesId, targetSeriesId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdMergeTargetSeriesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a series.
         * @param {string} seriesId The id of the series to update.
         * @param {SeriesDTO} [seriesDTO] The updated series.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seriesSeriesIdPut(seriesId: string, seriesDTO?: SeriesDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seriesSeriesIdPut(seriesId, seriesDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeriesApi.seriesSeriesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeriesApi - factory interface
 * @export
 */
export const SeriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all series.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SeriesDTOPagedResult> {
            return localVarFp.seriesGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search series with the series name.
         * @param {string} [name] The series name.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSearchGet(name?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.seriesSearchGet(name, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search suggestions with the series name.
         * @param {string} [name] The series name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSearchSuggestionsGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<BookDTO>> {
            return localVarFp.seriesSearchSuggestionsGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get books by the series id.
         * @param {string} seriesId The series id of the books to get.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.seriesSeriesIdBooksGet(seriesId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a series.
         * @param {string} seriesId The id of the seriesto delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.seriesSeriesIdDelete(seriesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get series by its id.
         * @param {string} seriesId The id of the series to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig): AxiosPromise<SeriesDTO> {
            return localVarFp.seriesSeriesIdGet(seriesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Merge the series into the target series.
         * @param {string} seriesId The source series id.
         * @param {string} targetSeriesId The target series id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdMergeTargetSeriesIdPut(seriesId: string, targetSeriesId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.seriesSeriesIdMergeTargetSeriesIdPut(seriesId, targetSeriesId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a series.
         * @param {string} seriesId The id of the series to update.
         * @param {SeriesDTO} [seriesDTO] The updated series.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seriesSeriesIdPut(seriesId: string, seriesDTO?: SeriesDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.seriesSeriesIdPut(seriesId, seriesDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeriesApi - object-oriented interface
 * @export
 * @class SeriesApi
 * @extends {BaseAPI}
 */
export class SeriesApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all series.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesGet(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search series with the series name.
     * @param {string} [name] The series name.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSearchGet(name?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSearchGet(name, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search suggestions with the series name.
     * @param {string} [name] The series name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSearchSuggestionsGet(name?: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSearchSuggestionsGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get books by the series id.
     * @param {string} seriesId The series id of the books to get.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdBooksGet(seriesId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdBooksGet(seriesId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a series.
     * @param {string} seriesId The id of the seriesto delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdDelete(seriesId: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdDelete(seriesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get series by its id.
     * @param {string} seriesId The id of the series to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdGet(seriesId: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdGet(seriesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Merge the series into the target series.
     * @param {string} seriesId The source series id.
     * @param {string} targetSeriesId The target series id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdMergeTargetSeriesIdPut(seriesId: string, targetSeriesId: string, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdMergeTargetSeriesIdPut(seriesId, targetSeriesId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a series.
     * @param {string} seriesId The id of the series to update.
     * @param {SeriesDTO} [seriesDTO] The updated series.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public seriesSeriesIdPut(seriesId: string, seriesDTO?: SeriesDTO, options?: RawAxiosRequestConfig) {
        return SeriesApiFp(this.configuration).seriesSeriesIdPut(seriesId, seriesDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a setting.
         * @param {string} settingId The id of the setting to update.
         * @param {any} [body] The updated setting value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSettingIdPut: async (settingId: string, body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('settingsSettingIdPut', 'settingId', settingId)
            const localVarPath = `/settings/{settingId}`
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjectSettingsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a setting.
         * @param {string} settingId The id of the setting to update.
         * @param {any} [body] The updated setting value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsSettingIdPut(settingId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsSettingIdPut(settingId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SettingsApi.settingsSettingIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ObjectSettingsDTO>> {
            return localVarFp.settingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a setting.
         * @param {string} settingId The id of the setting to update.
         * @param {any} [body] The updated setting value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSettingIdPut(settingId: string, body?: any, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.settingsSettingIdPut(settingId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsGet(options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a setting.
     * @param {string} settingId The id of the setting to update.
     * @param {any} [body] The updated setting value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsSettingIdPut(settingId: string, body?: any, options?: RawAxiosRequestConfig) {
        return SettingsApiFp(this.configuration).settingsSettingIdPut(settingId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskDTO>> {
            return localVarFp.tasksGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all tasks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksGet(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user.
         * @param {CreateUserDTO} [createUserDTO] The create user dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (createUserDTO?: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user.
         * @param {string} userId The id of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by the id.
         * @param {string} userId The id of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last visited books of a user.
         * @param {string} userId The id of the user.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdLastvisitedbooksGet: async (userId: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdLastvisitedbooksGet', 'userId', userId)
            const localVarPath = `/users/{userId}/lastvisitedbooks`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user.
         * @param {string} userId The id of the user to update.
         * @param {UserDTO} [userDTO] The updated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut: async (userId: string, userDTO?: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdPut', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the user settings of a user.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdSettingsGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdSettingsGet', 'userId', userId)
            const localVarPath = `/users/{userId}/settings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user setting of a user.
         * @param {string} userId The id of the user.
         * @param {UserSettingDTO} [userSettingDTO] The setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdSettingsPut: async (userId: string, userSettingDTO?: UserSettingDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdSettingsPut', 'userId', userId)
            const localVarPath = `/users/{userId}/settings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSettingDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new user.
         * @param {CreateUserDTO} [createUserDTO] The create user dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(createUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user.
         * @param {string} userId The id of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by the id.
         * @param {string} userId The id of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last visited books of a user.
         * @param {string} userId The id of the user.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdLastvisitedbooksGet(userId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTOPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdLastvisitedbooksGet(userId, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdLastvisitedbooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user.
         * @param {string} userId The id of the user to update.
         * @param {UserDTO} [userDTO] The updated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdPut(userId: string, userDTO?: UserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdPut(userId, userDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the user settings of a user.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdSettingsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSettingDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdSettingsGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user setting of a user.
         * @param {string} userId The id of the user.
         * @param {UserSettingDTO} [userSettingDTO] The setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdSettingsPut(userId: string, userSettingDTO?: UserSettingDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSettingDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdSettingsPut(userId, userSettingDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdSettingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDTO>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user.
         * @param {CreateUserDTO} [createUserDTO] The create user dto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.usersPost(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user.
         * @param {string} userId The id of the user to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by the id.
         * @param {string} userId The id of the user to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.usersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last visited books of a user.
         * @param {string} userId The id of the user.
         * @param {number} [page] The page number.
         * @param {number} [pageSize] The page size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdLastvisitedbooksGet(userId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<BookDTOPagedResult> {
            return localVarFp.usersUserIdLastvisitedbooksGet(userId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user.
         * @param {string} userId The id of the user to update.
         * @param {UserDTO} [userDTO] The updated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPut(userId: string, userDTO?: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserIdPut(userId, userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the user settings of a user.
         * @param {string} userId The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdSettingsGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSettingDTO>> {
            return localVarFp.usersUserIdSettingsGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user setting of a user.
         * @param {string} userId The id of the user.
         * @param {UserSettingDTO} [userSettingDTO] The setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdSettingsPut(userId: string, userSettingDTO?: UserSettingDTO, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSettingDTO>> {
            return localVarFp.usersUserIdSettingsPut(userId, userSettingDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user.
     * @param {CreateUserDTO} [createUserDTO] The create user dto.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPost(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user.
     * @param {string} userId The id of the user to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by the id.
     * @param {string} userId The id of the user to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdGet(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last visited books of a user.
     * @param {string} userId The id of the user.
     * @param {number} [page] The page number.
     * @param {number} [pageSize] The page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdLastvisitedbooksGet(userId: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdLastvisitedbooksGet(userId, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user.
     * @param {string} userId The id of the user to update.
     * @param {UserDTO} [userDTO] The updated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdPut(userId: string, userDTO?: UserDTO, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdPut(userId, userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the user settings of a user.
     * @param {string} userId The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdSettingsGet(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdSettingsGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user setting of a user.
     * @param {string} userId The id of the user.
     * @param {UserSettingDTO} [userSettingDTO] The setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdSettingsPut(userId: string, userSettingDTO?: UserSettingDTO, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdSettingsPut(userId, userSettingDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VersionApi.versionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the backend version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.versionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @summary Gets the backend version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public versionGet(options?: RawAxiosRequestConfig) {
        return VersionApiFp(this.configuration).versionGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WatchlistApi - axios parameter creator
 * @export
 */
export const WatchlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the watchlists of a user.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistGet: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/watchlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a watchlist result to the library.
         * @param {string} resultId The result id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistResultResultIdLibraryPut: async (resultId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultId' is not null or undefined
            assertParamExists('watchlistResultResultIdLibraryPut', 'resultId', resultId)
            const localVarPath = `/watchlist/result/{resultId}/library`
                .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check, if this series is on the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdIswatchedGet: async (seriesId: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('watchlistSeriesSeriesIdIswatchedGet', 'seriesId', seriesId)
            const localVarPath = `/watchlist/series/{seriesId}/iswatched`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a series from the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdWatchDelete: async (seriesId: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('watchlistSeriesSeriesIdWatchDelete', 'seriesId', seriesId)
            const localVarPath = `/watchlist/series/{seriesId}/watch`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a series to the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdWatchPut: async (seriesId: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seriesId' is not null or undefined
            assertParamExists('watchlistSeriesSeriesIdWatchPut', 'seriesId', seriesId)
            const localVarPath = `/watchlist/series/{seriesId}/watch`
                .replace(`{${"seriesId"}}`, encodeURIComponent(String(seriesId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WatchlistApi - functional programming interface
 * @export
 */
export const WatchlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WatchlistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the watchlists of a user.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistGet(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeriesWatchlistDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.watchlistGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a watchlist result to the library.
         * @param {string} resultId The result id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistResultResultIdLibraryPut(resultId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistResultResultIdLibraryPut(resultId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.watchlistResultResultIdLibraryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check, if this series is on the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistSeriesSeriesIdIswatchedGet(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistSeriesSeriesIdIswatchedGet(seriesId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.watchlistSeriesSeriesIdIswatchedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a series from the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistSeriesSeriesIdWatchDelete(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistSeriesSeriesIdWatchDelete(seriesId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.watchlistSeriesSeriesIdWatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a series to the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async watchlistSeriesSeriesIdWatchPut(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.watchlistSeriesSeriesIdWatchPut(seriesId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WatchlistApi.watchlistSeriesSeriesIdWatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WatchlistApi - factory interface
 * @export
 */
export const WatchlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WatchlistApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the watchlists of a user.
         * @param {string} [userId] The id of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistGet(userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SeriesWatchlistDTO>> {
            return localVarFp.watchlistGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a watchlist result to the library.
         * @param {string} resultId The result id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistResultResultIdLibraryPut(resultId: string, options?: RawAxiosRequestConfig): AxiosPromise<BookDTO> {
            return localVarFp.watchlistResultResultIdLibraryPut(resultId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check, if this series is on the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdIswatchedGet(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.watchlistSeriesSeriesIdIswatchedGet(seriesId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a series from the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdWatchDelete(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.watchlistSeriesSeriesIdWatchDelete(seriesId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a series to the watchlist.
         * @param {string} seriesId The series id.
         * @param {string} [userId] The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistSeriesSeriesIdWatchPut(seriesId: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.watchlistSeriesSeriesIdWatchPut(seriesId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WatchlistApi - object-oriented interface
 * @export
 * @class WatchlistApi
 * @extends {BaseAPI}
 */
export class WatchlistApi extends BaseAPI {
    /**
     * 
     * @summary Get the watchlists of a user.
     * @param {string} [userId] The id of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public watchlistGet(userId?: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).watchlistGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a watchlist result to the library.
     * @param {string} resultId The result id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public watchlistResultResultIdLibraryPut(resultId: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).watchlistResultResultIdLibraryPut(resultId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check, if this series is on the watchlist.
     * @param {string} seriesId The series id.
     * @param {string} [userId] The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public watchlistSeriesSeriesIdIswatchedGet(seriesId: string, userId?: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).watchlistSeriesSeriesIdIswatchedGet(seriesId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a series from the watchlist.
     * @param {string} seriesId The series id.
     * @param {string} [userId] The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public watchlistSeriesSeriesIdWatchDelete(seriesId: string, userId?: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).watchlistSeriesSeriesIdWatchDelete(seriesId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a series to the watchlist.
     * @param {string} seriesId The series id.
     * @param {string} [userId] The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApi
     */
    public watchlistSeriesSeriesIdWatchPut(seriesId: string, userId?: string, options?: RawAxiosRequestConfig) {
        return WatchlistApiFp(this.configuration).watchlistSeriesSeriesIdWatchPut(seriesId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}




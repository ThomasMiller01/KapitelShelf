name: Publish Frontend

on:
  workflow_dispatch: {} # allow manual run
  push:
    branches:
      - main
    paths:
      - 'frontend/CHANGELOG.md' # only run when the frontend version got bumped

permissions:
  contents: write
  packages: write

jobs:
  # docker:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Extract version from package.json
  #       working-directory: ./frontend
  #       id: version
  #       run: |
  #         # grab the version key
  #         VERSION=$(jq -r .version package.json)
  #         echo "VERSION=$VERSION" >> $GITHUB_ENV

  #         # split into major / minor
  #         MAJOR=${VERSION%%.*}
  #         echo "MAJOR=$MAJOR" >> $GITHUB_ENV

  #         MINOR=$(echo $VERSION | cut -d. -f2)
  #         echo "MINOR=$MINOR" >> $GITHUB_ENV
          
  #         # combine for x.y tag
  #         echo "MAJOR_MINOR=$MAJOR.$MINOR" >> $GITHUB_ENV

  #     - name: Log in to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: docker.io
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}      

  #     - name: Build docker image
  #       working-directory: ./frontend
  #       shell: pwsh
  #       run: |
  #         ./build.ps1 -repository docker.io -tag latest

  #     - name: Retag images and push to docker.io
  #       run: |
  #         echo "Re-tag and push '$VERSION' to docker.io"
  #         docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest docker.io/thomasmiller01/kapitelshelf-frontend:$VERSION
  #         docker push docker.io/thomasmiller01/kapitelshelf-frontend:$VERSION

  #         echo "Re-tag and push '$MAJOR_MINOR' to docker.io"
  #         docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest docker.io/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR
  #         docker push docker.io/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR

  #         if [ "$MAJOR" != "0" ]; then
  #           echo "Re-tag and push '$MAJOR' to docker.io"
  #           docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest docker.io/thomasmiller01/kapitelshelf-frontend:$MAJOR
  #           docker push docker.io/thomasmiller01/kapitelshelf-frontend:$MAJOR
  #         else
  #           echo "Skipping major tag (MAJOR=0)"
  #         fi

  #         echo "Push 'latest' to docker.io"
  #         docker push docker.io/thomasmiller01/kapitelshelf-frontend:latest

  #     - name: Retag images and push to ghcr.io
  #       run: |
  #         echo "Re-tag and push '$VERSION' to ghcr.io"
  #         docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest ghcr.io/thomasmiller01/kapitelshelf-frontend:$VERSION
  #         docker push ghcr.io/thomasmiller01/kapitelshelf-frontend:$VERSION

  #         echo "Re-tag and push '$MAJOR_MINOR' to ghcr.io"
  #         docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest ghcr.io/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR
  #         docker push ghcr.io/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR

  #         if [ "$MAJOR" != "0" ]; then
  #           echo "Re-tag and push '$MAJOR' to ghcr.io"
  #           docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest ghcr.io/thomasmiller01/kapitelshelf-frontend:$MAJOR
  #           docker push ghcr.io/thomasmiller01/kapitelshelf-frontend:$MAJOR
  #         else
  #           echo "Skipping major tag (MAJOR=0)"
  #         fi

  #         echo "Push 'latest' to ghcr.io"
  #         docker tag docker.io/thomasmiller01/kapitelshelf-frontend:latest ghcr.io/thomasmiller01/kapitelshelf-frontend:latest
  #         docker push ghcr.io/thomasmiller01/kapitelshelf-frontend:latest

  android:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Decode keystore
        run: |
          mkdir -p android/app/keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore/release-key.jks
          keytool -list -v -keystore android/app/keystore/release-key.jks -storepass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

      - name: Write credentials to gradle.properties
        run: |
          echo "KS_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/gradle.properties
          echo "KS_ALIAS_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/gradle.properties

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Sync mobile content
        run: npm run mobile:sync

      - name: Build Android APK (Release)
        run: chmod +x android/gradlew && cd android && ./gradlew clean assembleRelease

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: frontend/android/app/build/outputs/apk/release/app-release.apk

  release:
    runs-on: ubuntu-latest
    # needs: [docker, android]
    needs: [android]
    steps:
      - uses: actions/checkout@v4

      - name: Download Android apk
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: artifacts

      - name: Extract version from package.json
        working-directory: ./frontend
        id: version
        run: |
          # grab the version key
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract CHANGELOG for Release
        id: extract_changelog
        working-directory: ./frontend
        run: |
          # Pull the section under "## vX.Y.Z" up until the next "## "
          IN_SECTION=0
          while IFS= read -r line
          do
              # If this line is the header for our version, start capturing
              if [[ "$line" =~ ^##\ \[$VERSION\] ]]; then
                  IN_SECTION=1
                  echo "$line"
                  continue
              fi
              # If we reach the next version header, stop capturing
              if [[ "$IN_SECTION" -eq 1 && "$line" =~ ^##\ \[ ]]; then
                  break
              fi
              # Print the line if we're inside the desired version section
              if [[ "$IN_SECTION" -eq 1 ]]; then
                  echo "$line"
              fi
          done < CHANGELOG.md > release_body.txt

          # Export it as a multiline ENV for use in create-release
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_ENV
          cat release_body.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: frontend@${{ env.VERSION }}
          release_name: "Frontend v${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          files: artifacts/app-release.apk
          draft: false
          prerelease: false

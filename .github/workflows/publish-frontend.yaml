name: Publish Frontend Docker Image

on:
  workflow_dispatch: {} # allow manual run
  push:
    branches:
      - main
    paths:
      - 'frontend/CHANGELOG.md' # only run when the frontend version got bumped

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from package.json
        working-directory: ./frontend
        id: version
        run: |
          # grab the version key
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # split into major / minor
          MAJOR=${VERSION%%.*}
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV

          MINOR=$(echo $VERSION | cut -d. -f2)
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          
          # combine for x.y tag
          echo "MAJOR_MINOR=$MAJOR.$MINOR" >> $GITHUB_ENV

      - name: Build initial docker image and push
        working-directory: ./frontend
        shell: pwsh
        run: |
          ./build.ps1 -repository $DOCKERHUB_REGISTRY -tag latest

      - name: Retag images and push to $DOCKERHUB_REGISTRY
        run: |
          echo "Re-tag and push '$VERSION' to $DOCKERHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$VERSION
          docker push $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$VERSION

          echo "Re-tag and push '$MAJOR_MINOR' to $DOCKERHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR
          docker push $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR

          echo "Re-tag and push '$MAJOR' to $DOCKERHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR
          docker push $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR

          echo "Push 'latest' to $DOCKERHUB_REGISTRY"
          docker push $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest

      - name: Retag images and push to $GITHUB_REGISTRY
        run: |
          echo "Re-tag and push '$VERSION' to $GITHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$VERSION
          docker push $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$VERSION

          echo "Re-tag and push '$MAJOR_MINOR' to $GITHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR
          docker push $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR_MINOR

          echo "Re-tag and push '$MAJOR' to $GITHUB_REGISTRY"
          docker tag $DOCKERHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:latest $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR
          docker push $GITHUB_REGISTRY/thomasmiller01/kapitelshelf-frontend:$MAJOR

      - name: Extract CHANGELOG for Release
        id: extract_changelog
        working-directory: ./frontend
        run: |
          # Pull the section under "## vX.Y.Z" up until the next "## "
          awk '
            # when we hit the header for our version, start printing
            $0 ~ "^## '"$VERSION"'[[:space:]]*\\(" { flag=1 }
            # if we see a new header (and have already started), exit
            /^## / && flag && $0 !~ "^## '"$VERSION"'[[:space:]]*\\(" { exit }
            # if flag is set, print the line
            flag { print }
          ' CHANGELOG.md > release_body.txt

          # Export it as a multiline ENV for use in create-release
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_ENV
          cat release_body.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: frontend@${{ env.VERSION }}
          release_name: "Frontend v${{ env.VERSION }}"
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
